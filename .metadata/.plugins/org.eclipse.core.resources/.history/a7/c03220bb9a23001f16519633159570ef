import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.grupo7.model.ControladorEstoque;
import com.grupo7.model.Medico;
import com.grupo7.model.Paciente;
import com.grupo7.model.User;
import com.grupo7.repository.UserRepository;

import java.util.List;
import java.util.Optional;

@Service
public class UserService {

    @Autowired
    private UserRepository userRepository;

    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    public Optional<User> getUserById(Long id) {
        return userRepository.findById(id);
    }

    public User createUser(User user) {
        return userRepository.save(user);
    }

    public User updateUser(Long id, User userDetails) {
        Optional<User> user = userRepository.findById(id);
        if (user.isPresent()) {
            User existingUser = user.get();
            existingUser.setEmail(userDetails.getEmail());
            existingUser.setHashSenha(userDetails.getHashSenha());
            return userRepository.save(existingUser);
        } else {
            throw new RuntimeException("User not found with id " + id);
        }
    }

    public void deleteUser(Long id) {
        userRepository.deleteById(id);
    }

    public User assignRole(Long id, String role) {
        Optional<User> user = userRepository.findById(id);
        if (user.isPresent()) {
            User existingUser = user.get();
            switch (role.toLowerCase()) {
                case "medico":
                    Medico medico = new Medico();
                    medico.setUser(existingUser);
                    existingUser.getMedicos().add(medico);
                    break;
                case "paciente":
                    Paciente paciente = new Paciente();
                    paciente.setUser(existingUser);
                    existingUser.getPacientes().add(paciente);
                    break;
                case "controladorestoque":
                    ControladorEstoque controladorEstoque = new ControladorEstoque();
                    controladorEstoque.setUser(existingUser);
                    existingUser.getControladoresEstoque().add(controladorEstoque);
                    break;
                default:
                    throw new IllegalArgumentException("Invalid role: " + role);
            }
            return userRepository.save(existingUser);
        } else {
            throw new RuntimeException("User not found with id " + id);
        }
    }
}
